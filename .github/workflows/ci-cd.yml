name: 🚀 CI/CD Pipeline - ArchBuilder.AI Website

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  NEXT_PUBLIC_DOMAIN: ${{ secrets.NEXT_PUBLIC_DOMAIN || 'https://archbuilder.ai' }}
  
jobs:
  # ✅ Code Quality & Testing
  quality-check:
    name: 🔍 Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci --legacy-peer-deps
        
      - name: 🎨 Lint Check
        run: npm run lint
        
      - name: 💅 Format Check
        run: npm run format:check
        
      - name: 🧪 Run Tests
        run: npm run test:ci
        
      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          
  # 🏗️ Build & Performance Check
  build-check:
    name: 🏗️ Build & Performance
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci --legacy-peer-deps
        
      - name: 🔧 Build Application
        run: npm run build
        env:
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
          NEXT_PUBLIC_DOMAIN: ${{ env.NEXT_PUBLIC_DOMAIN }}
          
      - name: 📈 Bundle Analysis
        run: npm run build:analyze
        env:
          ANALYZE: true
          
      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            out/
            .next/
          retention-days: 7
          
      - name: 🚀 Performance Test
        run: npm run performance:test
        
  # 🔒 Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci --legacy-peer-deps
        
      - name: 🔍 Audit Dependencies
        run: npm audit --audit-level moderate
        
      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: 🏗️ Build for Analysis
        run: npm run build
        env:
          NEXT_PUBLIC_DOMAIN: ${{ env.NEXT_PUBLIC_DOMAIN }}
          
      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
  # 🌐 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-check, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci --legacy-peer-deps
        
      - name: 🔧 Build for Staging
        run: npm run build:production
        env:
          NEXT_PUBLIC_DOMAIN: ${{ secrets.STAGING_DOMAIN }}
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.STAGING_GA_MEASUREMENT_ID }}
          
      - name: 📁 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          
      - name: 🌐 Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './out'
          production-branch: develop
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - Staging"
          enable-pull-request-comment: true
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
          
  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-check, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci --legacy-peer-deps
        
      - name: 🔧 Build for Production
        run: npm run build:production
        env:
          NEXT_PUBLIC_DOMAIN: ${{ secrets.NEXT_PUBLIC_DOMAIN }}
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          
      - name: 🌐 Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🚀 Production Deploy - v${{ github.run_number }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}
          
      - name: 📧 Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🎉 ArchBuilder.AI website successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()
        
      - name: 📧 Notify Deployment Failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ ArchBuilder.AI production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()
        
  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 🗑️ Clean Build Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: build-output
          failOnError: false